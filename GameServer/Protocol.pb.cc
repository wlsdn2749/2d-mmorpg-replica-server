// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_JwtLoginRequest::C_JwtLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_JwtLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_JwtLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_JwtLoginRequestDefaultTypeInternal() {}
  union {
    C_JwtLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_JwtLoginRequestDefaultTypeInternal _C_JwtLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR S_JwtLoginReply::S_JwtLoginReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_JwtLoginReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_JwtLoginReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_JwtLoginReplyDefaultTypeInternal() {}
  union {
    S_JwtLoginReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_JwtLoginReplyDefaultTypeInternal _S_JwtLoginReply_default_instance_;
PROTOBUF_CONSTEXPR C_CreateCharacterRequest::C_CreateCharacterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gender_)*/0
  , /*decltype(_impl_.region_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CreateCharacterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CreateCharacterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CreateCharacterRequestDefaultTypeInternal() {}
  union {
    C_CreateCharacterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CreateCharacterRequestDefaultTypeInternal _C_CreateCharacterRequest_default_instance_;
PROTOBUF_CONSTEXPR S_CreateCharacterReply::S_CreateCharacterReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CreateCharacterReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CreateCharacterReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CreateCharacterReplyDefaultTypeInternal() {}
  union {
    S_CreateCharacterReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CreateCharacterReplyDefaultTypeInternal _S_CreateCharacterReply_default_instance_;
PROTOBUF_CONSTEXPR C_CharacterListRequest::C_CharacterListRequest(
    ::_pbi::ConstantInitialized) {}
struct C_CharacterListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CharacterListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CharacterListRequestDefaultTypeInternal() {}
  union {
    C_CharacterListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CharacterListRequestDefaultTypeInternal _C_CharacterListRequest_default_instance_;
PROTOBUF_CONSTEXPR S_CharacterListReply::S_CharacterListReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.characters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CharacterListReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CharacterListReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CharacterListReplyDefaultTypeInternal() {}
  union {
    S_CharacterListReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CharacterListReplyDefaultTypeInternal _S_CharacterListReply_default_instance_;
PROTOBUF_CONSTEXPR C_EnterGame::C_EnterGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EnterGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EnterGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EnterGameDefaultTypeInternal() {}
  union {
    C_EnterGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EnterGameDefaultTypeInternal _C_EnterGame_default_instance_;
PROTOBUF_CONSTEXPR S_EnterGame::S_EnterGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EnterGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EnterGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EnterGameDefaultTypeInternal() {}
  union {
    S_EnterGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EnterGameDefaultTypeInternal _S_EnterGame_default_instance_;
PROTOBUF_CONSTEXPR S_PlayerList::S_PlayerList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.myplayerid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PlayerListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PlayerListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PlayerListDefaultTypeInternal() {}
  union {
    S_PlayerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PlayerListDefaultTypeInternal _S_PlayerList_default_instance_;
PROTOBUF_CONSTEXPR S_BroadcastPlayerEnter::S_BroadcastPlayerEnter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BroadcastPlayerEnterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BroadcastPlayerEnterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BroadcastPlayerEnterDefaultTypeInternal() {}
  union {
    S_BroadcastPlayerEnter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BroadcastPlayerEnterDefaultTypeInternal _S_BroadcastPlayerEnter_default_instance_;
PROTOBUF_CONSTEXPR C_LeaveGame::C_LeaveGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LeaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LeaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LeaveGameDefaultTypeInternal() {}
  union {
    C_LeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LeaveGameDefaultTypeInternal _C_LeaveGame_default_instance_;
PROTOBUF_CONSTEXPR S_LeaveGame::S_LeaveGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LeaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LeaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LeaveGameDefaultTypeInternal() {}
  union {
    S_LeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LeaveGameDefaultTypeInternal _S_LeaveGame_default_instance_;
PROTOBUF_CONSTEXPR S_BroadcastPlayerLeave::S_BroadcastPlayerLeave(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BroadcastPlayerLeaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BroadcastPlayerLeaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BroadcastPlayerLeaveDefaultTypeInternal() {}
  union {
    S_BroadcastPlayerLeave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BroadcastPlayerLeaveDefaultTypeInternal _S_BroadcastPlayerLeave_default_instance_;
PROTOBUF_CONSTEXPR C_PlayerMoveRequest::C_PlayerMoveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clickworldpos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PlayerMoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PlayerMoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PlayerMoveRequestDefaultTypeInternal() {}
  union {
    C_PlayerMoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PlayerMoveRequestDefaultTypeInternal _C_PlayerMoveRequest_default_instance_;
PROTOBUF_CONSTEXPR S_PlayerMoveReply::S_PlayerMoveReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newpos_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.clientseq_)*/0
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.tick_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PlayerMoveReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PlayerMoveReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PlayerMoveReplyDefaultTypeInternal() {}
  union {
    S_PlayerMoveReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PlayerMoveReplyDefaultTypeInternal _S_PlayerMoveReply_default_instance_;
PROTOBUF_CONSTEXPR S_BroadcastPlayerMove::S_BroadcastPlayerMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playermoves_)*/{}
  , /*decltype(_impl_.tick_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BroadcastPlayerMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BroadcastPlayerMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BroadcastPlayerMoveDefaultTypeInternal() {}
  union {
    S_BroadcastPlayerMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BroadcastPlayerMoveDefaultTypeInternal _S_BroadcastPlayerMove_default_instance_;
PROTOBUF_CONSTEXPR S_ChangeRoomBegin::S_ChangeRoomBegin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transitionid_)*/0
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ChangeRoomBeginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ChangeRoomBeginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ChangeRoomBeginDefaultTypeInternal() {}
  union {
    S_ChangeRoomBegin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ChangeRoomBeginDefaultTypeInternal _S_ChangeRoomBegin_default_instance_;
PROTOBUF_CONSTEXPR C_ChangeRoomReady::C_ChangeRoomReady(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transitionid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ChangeRoomReadyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ChangeRoomReadyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ChangeRoomReadyDefaultTypeInternal() {}
  union {
    C_ChangeRoomReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ChangeRoomReadyDefaultTypeInternal _C_ChangeRoomReady_default_instance_;
PROTOBUF_CONSTEXPR S_ChangeRoomCommit::S_ChangeRoomCommit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.snapshots_)*/nullptr
  , /*decltype(_impl_.transitionid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ChangeRoomCommitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ChangeRoomCommitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ChangeRoomCommitDefaultTypeInternal() {}
  union {
    S_ChangeRoomCommit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ChangeRoomCommitDefaultTypeInternal _S_ChangeRoomCommit_default_instance_;
PROTOBUF_CONSTEXPR S_SpawnMonster::S_SpawnMonster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsterid_)*/0
  , /*decltype(_impl_.monstertypeid_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SpawnMonsterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SpawnMonsterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SpawnMonsterDefaultTypeInternal() {}
  union {
    S_SpawnMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SpawnMonsterDefaultTypeInternal _S_SpawnMonster_default_instance_;
PROTOBUF_CONSTEXPR S_DespawnMonster::S_DespawnMonster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsterid_)*/0
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DespawnMonsterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DespawnMonsterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DespawnMonsterDefaultTypeInternal() {}
  union {
    S_DespawnMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DespawnMonsterDefaultTypeInternal _S_DespawnMonster_default_instance_;
PROTOBUF_CONSTEXPR S_BroadcastMonsterMove::S_BroadcastMonsterMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsterid_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BroadcastMonsterMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BroadcastMonsterMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BroadcastMonsterMoveDefaultTypeInternal() {}
  union {
    S_BroadcastMonsterMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BroadcastMonsterMoveDefaultTypeInternal _S_BroadcastMonsterMove_default_instance_;
PROTOBUF_CONSTEXPR S_BroadcastMonsterAttack::S_BroadcastMonsterAttack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsterid_)*/0
  , /*decltype(_impl_.targetpid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BroadcastMonsterAttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BroadcastMonsterAttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BroadcastMonsterAttackDefaultTypeInternal() {}
  union {
    S_BroadcastMonsterAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BroadcastMonsterAttackDefaultTypeInternal _S_BroadcastMonsterAttack_default_instance_;
PROTOBUF_CONSTEXPR S_BroadcastMonsterDeath::S_BroadcastMonsterDeath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsterid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BroadcastMonsterDeathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BroadcastMonsterDeathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BroadcastMonsterDeathDefaultTypeInternal() {}
  union {
    S_BroadcastMonsterDeath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BroadcastMonsterDeathDefaultTypeInternal _S_BroadcastMonsterDeath_default_instance_;
PROTOBUF_CONSTEXPR C_PlayerAttackRequest::C_PlayerAttackRequest(
    ::_pbi::ConstantInitialized) {}
struct C_PlayerAttackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PlayerAttackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PlayerAttackRequestDefaultTypeInternal() {}
  union {
    C_PlayerAttackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PlayerAttackRequestDefaultTypeInternal _C_PlayerAttackRequest_default_instance_;
PROTOBUF_CONSTEXPR S_BroadcastPlayerAttack::S_BroadcastPlayerAttack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.targetid_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.hpafter_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BroadcastPlayerAttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BroadcastPlayerAttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BroadcastPlayerAttackDefaultTypeInternal() {}
  union {
    S_BroadcastPlayerAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BroadcastPlayerAttackDefaultTypeInternal _S_BroadcastPlayerAttack_default_instance_;
PROTOBUF_CONSTEXPR Vector2Info::Vector2Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2InfoDefaultTypeInternal() {}
  union {
    Vector2Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2InfoDefaultTypeInternal _Vector2Info_default_instance_;
PROTOBUF_CONSTEXPR PlayerMoveInfo::PlayerMoveInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newpos_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerMoveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerMoveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerMoveInfoDefaultTypeInternal() {}
  union {
    PlayerMoveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMoveInfoDefaultTypeInternal _PlayerMoveInfo_default_instance_;
PROTOBUF_CONSTEXPR CharacterSummaryInfo::CharacterSummaryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.gender_)*/0
  , /*decltype(_impl_.region_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterSummaryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterSummaryInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterSummaryInfoDefaultTypeInternal() {}
  union {
    CharacterSummaryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterSummaryInfoDefaultTypeInternal _CharacterSummaryInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[30];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_JwtLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_JwtLoginRequest, _impl_.accesstoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JwtLoginReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JwtLoginReply, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CreateCharacterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CreateCharacterRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CreateCharacterRequest, _impl_.gender_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CreateCharacterRequest, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CreateCharacterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CreateCharacterReply, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CreateCharacterReply, _impl_.detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CharacterListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CharacterListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CharacterListReply, _impl_.characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EnterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EnterGame, _impl_.playerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EnterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EnterGame, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerList, _impl_.myplayerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerList, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerEnter, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LeaveGame, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LeaveGame, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerLeave, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerLeave, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PlayerMoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PlayerMoveRequest, _impl_.clickworldpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerMoveReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerMoveReply, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerMoveReply, _impl_.clientseq_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerMoveReply, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerMoveReply, _impl_.tick_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerMoveReply, _impl_.newpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayerMoveReply, _impl_.direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerMove, _impl_.tick_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerMove, _impl_.playermoves_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ChangeRoomBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ChangeRoomBegin, _impl_.transitionid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ChangeRoomBegin, _impl_.mapid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ChangeRoomReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ChangeRoomReady, _impl_.transitionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ChangeRoomCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ChangeRoomCommit, _impl_.transitionid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ChangeRoomCommit, _impl_.snapshots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SpawnMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SpawnMonster, _impl_.monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SpawnMonster, _impl_.monstertypeid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SpawnMonster, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SpawnMonster, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SpawnMonster, _impl_.dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DespawnMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DespawnMonster, _impl_.monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DespawnMonster, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterMove, _impl_.monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterMove, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterMove, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterMove, _impl_.dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterAttack, _impl_.monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterAttack, _impl_.targetpid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterDeath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastMonsterDeath, _impl_.monsterid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PlayerAttackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerAttack, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerAttack, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerAttack, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BroadcastPlayerAttack, _impl_.hpafter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector2Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector2Info, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector2Info, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.newpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::CharacterSummaryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::CharacterSummaryInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::Protocol::CharacterSummaryInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::CharacterSummaryInfo, _impl_.gender_),
  PROTOBUF_FIELD_OFFSET(::Protocol::CharacterSummaryInfo, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.direction_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_JwtLoginRequest)},
  { 7, -1, -1, sizeof(::Protocol::S_JwtLoginReply)},
  { 14, -1, -1, sizeof(::Protocol::C_CreateCharacterRequest)},
  { 23, -1, -1, sizeof(::Protocol::S_CreateCharacterReply)},
  { 31, -1, -1, sizeof(::Protocol::C_CharacterListRequest)},
  { 37, -1, -1, sizeof(::Protocol::S_CharacterListReply)},
  { 44, -1, -1, sizeof(::Protocol::C_EnterGame)},
  { 51, -1, -1, sizeof(::Protocol::S_EnterGame)},
  { 58, -1, -1, sizeof(::Protocol::S_PlayerList)},
  { 66, -1, -1, sizeof(::Protocol::S_BroadcastPlayerEnter)},
  { 73, -1, -1, sizeof(::Protocol::C_LeaveGame)},
  { 80, -1, -1, sizeof(::Protocol::S_LeaveGame)},
  { 87, -1, -1, sizeof(::Protocol::S_BroadcastPlayerLeave)},
  { 95, -1, -1, sizeof(::Protocol::C_PlayerMoveRequest)},
  { 102, -1, -1, sizeof(::Protocol::S_PlayerMoveReply)},
  { 114, -1, -1, sizeof(::Protocol::S_BroadcastPlayerMove)},
  { 122, -1, -1, sizeof(::Protocol::S_ChangeRoomBegin)},
  { 130, -1, -1, sizeof(::Protocol::C_ChangeRoomReady)},
  { 137, -1, -1, sizeof(::Protocol::S_ChangeRoomCommit)},
  { 145, -1, -1, sizeof(::Protocol::S_SpawnMonster)},
  { 156, -1, -1, sizeof(::Protocol::S_DespawnMonster)},
  { 164, -1, -1, sizeof(::Protocol::S_BroadcastMonsterMove)},
  { 174, -1, -1, sizeof(::Protocol::S_BroadcastMonsterAttack)},
  { 182, -1, -1, sizeof(::Protocol::S_BroadcastMonsterDeath)},
  { 189, -1, -1, sizeof(::Protocol::C_PlayerAttackRequest)},
  { 195, -1, -1, sizeof(::Protocol::S_BroadcastPlayerAttack)},
  { 205, -1, -1, sizeof(::Protocol::Vector2Info)},
  { 213, -1, -1, sizeof(::Protocol::PlayerMoveInfo)},
  { 223, -1, -1, sizeof(::Protocol::CharacterSummaryInfo)},
  { 233, -1, -1, sizeof(::Protocol::PlayerInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_JwtLoginRequest_default_instance_._instance,
  &::Protocol::_S_JwtLoginReply_default_instance_._instance,
  &::Protocol::_C_CreateCharacterRequest_default_instance_._instance,
  &::Protocol::_S_CreateCharacterReply_default_instance_._instance,
  &::Protocol::_C_CharacterListRequest_default_instance_._instance,
  &::Protocol::_S_CharacterListReply_default_instance_._instance,
  &::Protocol::_C_EnterGame_default_instance_._instance,
  &::Protocol::_S_EnterGame_default_instance_._instance,
  &::Protocol::_S_PlayerList_default_instance_._instance,
  &::Protocol::_S_BroadcastPlayerEnter_default_instance_._instance,
  &::Protocol::_C_LeaveGame_default_instance_._instance,
  &::Protocol::_S_LeaveGame_default_instance_._instance,
  &::Protocol::_S_BroadcastPlayerLeave_default_instance_._instance,
  &::Protocol::_C_PlayerMoveRequest_default_instance_._instance,
  &::Protocol::_S_PlayerMoveReply_default_instance_._instance,
  &::Protocol::_S_BroadcastPlayerMove_default_instance_._instance,
  &::Protocol::_S_ChangeRoomBegin_default_instance_._instance,
  &::Protocol::_C_ChangeRoomReady_default_instance_._instance,
  &::Protocol::_S_ChangeRoomCommit_default_instance_._instance,
  &::Protocol::_S_SpawnMonster_default_instance_._instance,
  &::Protocol::_S_DespawnMonster_default_instance_._instance,
  &::Protocol::_S_BroadcastMonsterMove_default_instance_._instance,
  &::Protocol::_S_BroadcastMonsterAttack_default_instance_._instance,
  &::Protocol::_S_BroadcastMonsterDeath_default_instance_._instance,
  &::Protocol::_C_PlayerAttackRequest_default_instance_._instance,
  &::Protocol::_S_BroadcastPlayerAttack_default_instance_._instance,
  &::Protocol::_Vector2Info_default_instance_._instance,
  &::Protocol::_PlayerMoveInfo_default_instance_._instance,
  &::Protocol::_CharacterSummaryInfo_default_instance_._instance,
  &::Protocol::_PlayerInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\"(\n\021C_JwtLogin"
  "Request\022\023\n\013accessToken\030\001 \001(\t\"9\n\017S_JwtLog"
  "inReply\022&\n\006result\030\001 \001(\0162\026.Protocol.ELogi"
  "nResult\"r\n\030C_CreateCharacterRequest\022\020\n\010u"
  "sername\030\001 \001(\t\022!\n\006gender\030\002 \001(\0162\021.Protocol"
  ".EGender\022!\n\006region\030\003 \001(\0162\021.Protocol.EReg"
  "ion\"9\n\026S_CreateCharacterReply\022\017\n\007success"
  "\030\001 \001(\010\022\016\n\006detail\030\002 \001(\t\"\030\n\026C_CharacterLis"
  "tRequest\"J\n\024S_CharacterListReply\0222\n\nchar"
  "acters\030\001 \003(\0132\036.Protocol.CharacterSummary"
  "Info\"\"\n\013C_EnterGame\022\023\n\013playerIndex\030\001 \001(\005"
  "\"\036\n\013S_EnterGame\022\017\n\007success\030\001 \001(\005\"I\n\014S_Pl"
  "ayerList\022\022\n\nmyPlayerId\030\001 \001(\005\022%\n\007players\030"
  "\002 \003(\0132\024.Protocol.PlayerInfo\">\n\026S_Broadca"
  "stPlayerEnter\022$\n\006player\030\001 \001(\0132\024.Protocol"
  ".PlayerInfo\"5\n\013C_LeaveGame\022&\n\006reason\030\001 \001"
  "(\0162\026.Protocol.ELeaveReason\"\036\n\013S_LeaveGam"
  "e\022\017\n\007success\030\001 \001(\005\"R\n\026S_BroadcastPlayerL"
  "eave\022\020\n\010playerId\030\001 \001(\005\022&\n\006reason\030\002 \001(\0162\026"
  ".Protocol.ELeaveReason\"C\n\023C_PlayerMoveRe"
  "quest\022,\n\rclickWorldPos\030\001 \001(\0132\025.Protocol."
  "Vector2Info\"\275\001\n\021S_PlayerMoveReply\022\020\n\010pla"
  "yerId\030\001 \001(\005\022\021\n\tclientSeq\030\002 \001(\005\022%\n\006result"
  "\030\003 \001(\0162\025.Protocol.EMoveResult\022\014\n\004tick\030\004 "
  "\001(\005\022%\n\006newPos\030\005 \001(\0132\025.Protocol.Vector2In"
  "fo\022\'\n\tdirection\030\006 \001(\0162\024.Protocol.EDirect"
  "ion\"T\n\025S_BroadcastPlayerMove\022\014\n\004tick\030\001 \001"
  "(\005\022-\n\013playerMoves\030\002 \003(\0132\030.Protocol.Playe"
  "rMoveInfo\"8\n\021S_ChangeRoomBegin\022\024\n\014transi"
  "tionId\030\001 \001(\005\022\r\n\005mapId\030\002 \001(\005\")\n\021C_ChangeR"
  "oomReady\022\024\n\014transitionId\030\001 \001(\005\"U\n\022S_Chan"
  "geRoomCommit\022\024\n\014transitionId\030\001 \001(\005\022)\n\tsn"
  "apshots\030\002 \001(\0132\026.Protocol.S_PlayerList\"s\n"
  "\016S_SpawnMonster\022\021\n\tmonsterId\030\001 \001(\005\022\025\n\rmo"
  "nsterTypeId\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022"
  "!\n\003dir\030\005 \001(\0162\024.Protocol.EDirection\"O\n\020S_"
  "DespawnMonster\022\021\n\tmonsterId\030\001 \001(\005\022(\n\006rea"
  "son\030\002 \001(\0162\030.Protocol.EDespawnReason\"d\n\026S"
  "_BroadcastMonsterMove\022\021\n\tmonsterId\030\001 \001(\005"
  "\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022!\n\003dir\030\004 \001(\0162\024.Pr"
  "otocol.EDirection\"@\n\030S_BroadcastMonsterA"
  "ttack\022\021\n\tmonsterId\030\001 \001(\005\022\021\n\ttargetPid\030\002 "
  "\001(\005\",\n\027S_BroadcastMonsterDeath\022\021\n\tmonste"
  "rId\030\001 \001(\005\"\027\n\025C_PlayerAttackRequest\"^\n\027S_"
  "BroadcastPlayerAttack\022\020\n\010playerId\030\001 \001(\005\022"
  "\020\n\010targetId\030\002 \001(\005\022\016\n\006damage\030\003 \001(\005\022\017\n\007hpA"
  "fter\030\004 \001(\005\"#\n\013Vector2Info\022\t\n\001x\030\001 \001(\005\022\t\n\001"
  "y\030\002 \001(\005\"\231\001\n\016PlayerMoveInfo\022\020\n\010playerId\030\001"
  " \001(\005\022\'\n\tdirection\030\002 \001(\0162\024.Protocol.EDire"
  "ction\022%\n\006newPos\030\003 \001(\0132\025.Protocol.Vector2"
  "Info\022%\n\006result\030\004 \001(\0162\025.Protocol.EMoveRes"
  "ult\"}\n\024CharacterSummaryInfo\022\020\n\010username\030"
  "\001 \001(\t\022\r\n\005level\030\002 \001(\005\022!\n\006gender\030\003 \001(\0162\021.P"
  "rotocol.EGender\022!\n\006region\030\004 \001(\0162\021.Protoc"
  "ol.ERegion\"w\n\nPlayerInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010"
  "username\030\002 \001(\t\022\"\n\003pos\030\003 \001(\0132\025.Protocol.V"
  "ector2Info\022\'\n\tdirection\030\004 \001(\0162\024.Protocol"
  ".EDirection*\250\005\n\005MsgId\022\027\n\023C_JWT_LOGIN_REQ"
  "UEST\020\000\022\025\n\021S_JWT_LOGIN_REPLY\020\001\022\036\n\032C_CREAT"
  "E_CHARACTER_REQUEST\020\002\022\034\n\030S_CREATE_CHARAC"
  "TER_REPLY\020\003\022\034\n\030C_CHARACTER_LIST_REQUEST\020"
  "\004\022\032\n\026S_CHARACTER_LIST_REPLY\020\005\022\020\n\014C_ENTER"
  "_GAME\020\006\022\020\n\014S_ENTER_GAME\020\007\022\021\n\rS_PLAYER_LI"
  "ST\020\010\022\034\n\030S_BROADCAST_PLAYER_ENTER\020\t\022\020\n\014C_"
  "LEAVE_GAME\020\n\022\020\n\014S_LEAVE_GAME\020\013\022\034\n\030S_BROA"
  "DCAST_PLAYER_LEAVE\020\014\022\031\n\025C_PLAYER_MOVE_RE"
  "QUEST\020\r\022\027\n\023S_PLAYER_MOVE_REPLY\020\016\022\033\n\027S_BR"
  "OADCAST_PLAYER_MOVE\020\017\022\027\n\023S_CHANGE_ROOM_B"
  "EGIN\020\020\022\027\n\023C_CHANGE_ROOM_READY\020\021\022\030\n\024S_CHA"
  "NGE_ROOM_COMMIT\020\022\022\023\n\017S_SPAWN_MONSTER\020\023\022\025"
  "\n\021S_DESPAWN_MONSTER\020\024\022\034\n\030S_BROADCAST_MON"
  "STER_MOVE\020\025\022\036\n\032S_BROADCAST_MONSTER_ATTAC"
  "K\020\026\022\035\n\031S_BROADCAST_MONSTER_DEATH\020\027\022\033\n\027C_"
  "PLAYER_ATTACK_REQUEST\020\030\022\035\n\031S_BROADCAST_P"
  "LAYER_ATTACK\020\031*S\n\014ELoginResult\022\013\n\007SUCCES"
  "S\020\000\022\021\n\rINVALID_TOKEN\020\001\022\021\n\rTOKEN_EXPIRED\020"
  "\002\022\020\n\014SERVER_ERROR\020\003*>\n\007EGender\022\017\n\013GENDER"
  "_NONE\020\000\022\017\n\013GENDER_MALE\020\001\022\021\n\rGENDER_FEMAL"
  "E\020\002*:\n\007ERegion\022\017\n\013REGION_NONE\020\000\022\r\n\tREGIO"
  "N_GO\020\001\022\017\n\013REGION_BACK\020\002*C\n\nEDirection\022\n\n"
  "\006DIR_UP\020\000\022\014\n\010DIR_DOWN\020\001\022\014\n\010DIR_LEFT\020\002\022\r\n"
  "\tDIR_RIGHT\020\003*`\n\014ELeaveReason\022\021\n\rLEAVE_UN"
  "KNOWN\020\000\022\020\n\014LEAVE_LOGOUT\020\001\022\025\n\021LEAVE_CHANG"
  "E_ROOM\020\002\022\024\n\020LEAVE_DISCONNECT\020\003*_\n\013EMoveR"
  "esult\022\020\n\014MOVE_UNKNOWN\020\000\022\013\n\007MOVE_OK\020\001\022\014\n\010"
  "MOVE_DIR\020\002\022\021\n\rMOVE_COOLDOWN\020\003\022\020\n\014MOVE_BL"
  "OCKED\020\004*I\n\014EEnterReason\022\021\n\rENTER_UNKNOWN"
  "\020\000\022\017\n\013ENTER_LOGIN\020\001\022\025\n\021ENTER_CHANGE_ROOM"
  "\020\002*9\n\016EDespawnReason\022\023\n\017DESPAWN_UNKNOWN\020"
  "\000\022\022\n\016DESPAWN_KILLED\020\001B\033\252\002\030Google.Protobu"
  "f.Protocolb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 3618, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, nullptr, 0, 30,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELoginResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[1];
}
bool ELoginResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[2];
}
bool EGender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERegion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[3];
}
bool ERegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[4];
}
bool EDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELeaveReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[5];
}
bool ELeaveReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMoveResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[6];
}
bool EMoveResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EEnterReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[7];
}
bool EEnterReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDespawnReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[8];
}
bool EDespawnReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class C_JwtLoginRequest::_Internal {
 public:
};

C_JwtLoginRequest::C_JwtLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_JwtLoginRequest)
}
C_JwtLoginRequest::C_JwtLoginRequest(const C_JwtLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_JwtLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_JwtLoginRequest)
}

inline void C_JwtLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_JwtLoginRequest::~C_JwtLoginRequest() {
  // @@protoc_insertion_point(destructor:Protocol.C_JwtLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_JwtLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
}

void C_JwtLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_JwtLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_JwtLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_JwtLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string accessToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_JwtLoginRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_JwtLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_JwtLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string accessToken = 1;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_JwtLoginRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accesstoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_JwtLoginRequest)
  return target;
}

size_t C_JwtLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_JwtLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 1;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_JwtLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_JwtLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_JwtLoginRequest::GetClassData() const { return &_class_data_; }


void C_JwtLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_JwtLoginRequest*>(&to_msg);
  auto& from = static_cast<const C_JwtLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_JwtLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_JwtLoginRequest::CopyFrom(const C_JwtLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_JwtLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_JwtLoginRequest::IsInitialized() const {
  return true;
}

void C_JwtLoginRequest::InternalSwap(C_JwtLoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_JwtLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_JwtLoginReply::_Internal {
 public:
};

S_JwtLoginReply::S_JwtLoginReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_JwtLoginReply)
}
S_JwtLoginReply::S_JwtLoginReply(const S_JwtLoginReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_JwtLoginReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_JwtLoginReply)
}

inline void S_JwtLoginReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_JwtLoginReply::~S_JwtLoginReply() {
  // @@protoc_insertion_point(destructor:Protocol.S_JwtLoginReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_JwtLoginReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_JwtLoginReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_JwtLoginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_JwtLoginReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_JwtLoginReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ELoginResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::Protocol::ELoginResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_JwtLoginReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_JwtLoginReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ELoginResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_JwtLoginReply)
  return target;
}

size_t S_JwtLoginReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_JwtLoginReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ELoginResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_JwtLoginReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_JwtLoginReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_JwtLoginReply::GetClassData() const { return &_class_data_; }


void S_JwtLoginReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_JwtLoginReply*>(&to_msg);
  auto& from = static_cast<const S_JwtLoginReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_JwtLoginReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_JwtLoginReply::CopyFrom(const S_JwtLoginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_JwtLoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_JwtLoginReply::IsInitialized() const {
  return true;
}

void S_JwtLoginReply::InternalSwap(S_JwtLoginReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_JwtLoginReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_CreateCharacterRequest::_Internal {
 public:
};

C_CreateCharacterRequest::C_CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CreateCharacterRequest)
}
C_CreateCharacterRequest::C_CreateCharacterRequest(const C_CreateCharacterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CreateCharacterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.gender_){}
    , decltype(_impl_.region_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gender_, &from._impl_.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.region_) -
    reinterpret_cast<char*>(&_impl_.gender_)) + sizeof(_impl_.region_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CreateCharacterRequest)
}

inline void C_CreateCharacterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.gender_){0}
    , decltype(_impl_.region_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CreateCharacterRequest::~C_CreateCharacterRequest() {
  // @@protoc_insertion_point(destructor:Protocol.C_CreateCharacterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CreateCharacterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void C_CreateCharacterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CreateCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CreateCharacterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  ::memset(&_impl_.gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.region_) -
      reinterpret_cast<char*>(&_impl_.gender_)) + sizeof(_impl_.region_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CreateCharacterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CreateCharacterRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EGender gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::Protocol::EGender>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ERegion region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_region(static_cast<::Protocol::ERegion>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CreateCharacterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CreateCharacterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CreateCharacterRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // .Protocol.EGender gender = 2;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gender(), target);
  }

  // .Protocol.ERegion region = 3;
  if (this->_internal_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CreateCharacterRequest)
  return target;
}

size_t C_CreateCharacterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CreateCharacterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .Protocol.EGender gender = 2;
  if (this->_internal_gender() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // .Protocol.ERegion region = 3;
  if (this->_internal_region() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CreateCharacterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CreateCharacterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CreateCharacterRequest::GetClassData() const { return &_class_data_; }


void C_CreateCharacterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CreateCharacterRequest*>(&to_msg);
  auto& from = static_cast<const C_CreateCharacterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CreateCharacterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_gender() != 0) {
    _this->_internal_set_gender(from._internal_gender());
  }
  if (from._internal_region() != 0) {
    _this->_internal_set_region(from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CreateCharacterRequest::CopyFrom(const C_CreateCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CreateCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CreateCharacterRequest::IsInitialized() const {
  return true;
}

void C_CreateCharacterRequest::InternalSwap(C_CreateCharacterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_CreateCharacterRequest, _impl_.region_)
      + sizeof(C_CreateCharacterRequest::_impl_.region_)
      - PROTOBUF_FIELD_OFFSET(C_CreateCharacterRequest, _impl_.gender_)>(
          reinterpret_cast<char*>(&_impl_.gender_),
          reinterpret_cast<char*>(&other->_impl_.gender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CreateCharacterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_CreateCharacterReply::_Internal {
 public:
};

S_CreateCharacterReply::S_CreateCharacterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CreateCharacterReply)
}
S_CreateCharacterReply::S_CreateCharacterReply(const S_CreateCharacterReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CreateCharacterReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail().empty()) {
    _this->_impl_.detail_.Set(from._internal_detail(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CreateCharacterReply)
}

inline void S_CreateCharacterReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CreateCharacterReply::~S_CreateCharacterReply() {
  // @@protoc_insertion_point(destructor:Protocol.S_CreateCharacterReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CreateCharacterReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detail_.Destroy();
}

void S_CreateCharacterReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CreateCharacterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CreateCharacterReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detail_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CreateCharacterReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CreateCharacterReply.detail"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CreateCharacterReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CreateCharacterReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string detail = 2;
  if (!this->_internal_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CreateCharacterReply.detail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CreateCharacterReply)
  return target;
}

size_t S_CreateCharacterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CreateCharacterReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 2;
  if (!this->_internal_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CreateCharacterReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CreateCharacterReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CreateCharacterReply::GetClassData() const { return &_class_data_; }


void S_CreateCharacterReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CreateCharacterReply*>(&to_msg);
  auto& from = static_cast<const S_CreateCharacterReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CreateCharacterReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_detail().empty()) {
    _this->_internal_set_detail(from._internal_detail());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CreateCharacterReply::CopyFrom(const S_CreateCharacterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CreateCharacterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CreateCharacterReply::IsInitialized() const {
  return true;
}

void S_CreateCharacterReply::InternalSwap(S_CreateCharacterReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detail_, lhs_arena,
      &other->_impl_.detail_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CreateCharacterReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_CharacterListRequest::_Internal {
 public:
};

C_CharacterListRequest::C_CharacterListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CharacterListRequest)
}
C_CharacterListRequest::C_CharacterListRequest(const C_CharacterListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_CharacterListRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CharacterListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CharacterListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CharacterListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_CharacterListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_CharacterListReply::_Internal {
 public:
};

S_CharacterListReply::S_CharacterListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CharacterListReply)
}
S_CharacterListReply::S_CharacterListReply(const S_CharacterListReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CharacterListReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.characters_){from._impl_.characters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CharacterListReply)
}

inline void S_CharacterListReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.characters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_CharacterListReply::~S_CharacterListReply() {
  // @@protoc_insertion_point(destructor:Protocol.S_CharacterListReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CharacterListReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.characters_.~RepeatedPtrField();
}

void S_CharacterListReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CharacterListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CharacterListReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.characters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CharacterListReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.CharacterSummaryInfo characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CharacterListReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CharacterListReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.CharacterSummaryInfo characters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_characters_size()); i < n; i++) {
    const auto& repfield = this->_internal_characters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CharacterListReply)
  return target;
}

size_t S_CharacterListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CharacterListReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.CharacterSummaryInfo characters = 1;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->_impl_.characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CharacterListReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CharacterListReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CharacterListReply::GetClassData() const { return &_class_data_; }


void S_CharacterListReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CharacterListReply*>(&to_msg);
  auto& from = static_cast<const S_CharacterListReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CharacterListReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.characters_.MergeFrom(from._impl_.characters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CharacterListReply::CopyFrom(const S_CharacterListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CharacterListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CharacterListReply::IsInitialized() const {
  return true;
}

void S_CharacterListReply::InternalSwap(S_CharacterListReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.characters_.InternalSwap(&other->_impl_.characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CharacterListReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class C_EnterGame::_Internal {
 public:
};

C_EnterGame::C_EnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_EnterGame)
}
C_EnterGame::C_EnterGame(const C_EnterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_EnterGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerindex_ = from._impl_.playerindex_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_EnterGame)
}

inline void C_EnterGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_EnterGame::~C_EnterGame() {
  // @@protoc_insertion_point(destructor:Protocol.C_EnterGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_EnterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EnterGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_EnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_EnterGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EnterGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EnterGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_EnterGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_EnterGame)
  return target;
}

size_t C_EnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_EnterGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EnterGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_EnterGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EnterGame::GetClassData() const { return &_class_data_; }


void C_EnterGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_EnterGame*>(&to_msg);
  auto& from = static_cast<const C_EnterGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_EnterGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EnterGame::CopyFrom(const C_EnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_EnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EnterGame::IsInitialized() const {
  return true;
}

void C_EnterGame::InternalSwap(C_EnterGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerindex_, other->_impl_.playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EnterGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_EnterGame::_Internal {
 public:
};

S_EnterGame::S_EnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_EnterGame)
}
S_EnterGame::S_EnterGame(const S_EnterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_EnterGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_EnterGame)
}

inline void S_EnterGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_EnterGame::~S_EnterGame() {
  // @@protoc_insertion_point(destructor:Protocol.S_EnterGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_EnterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EnterGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_EnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_EnterGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EnterGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EnterGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_EnterGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_EnterGame)
  return target;
}

size_t S_EnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_EnterGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 success = 1;
  if (this->_internal_success() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_success());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EnterGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_EnterGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EnterGame::GetClassData() const { return &_class_data_; }


void S_EnterGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_EnterGame*>(&to_msg);
  auto& from = static_cast<const S_EnterGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_EnterGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EnterGame::CopyFrom(const S_EnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_EnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EnterGame::IsInitialized() const {
  return true;
}

void S_EnterGame::InternalSwap(S_EnterGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EnterGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_PlayerList::_Internal {
 public:
};

S_PlayerList::S_PlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PlayerList)
}
S_PlayerList::S_PlayerList(const S_PlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PlayerList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.myplayerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.myplayerid_ = from._impl_.myplayerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PlayerList)
}

inline void S_PlayerList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.myplayerid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PlayerList::~S_PlayerList() {
  // @@protoc_insertion_point(destructor:Protocol.S_PlayerList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PlayerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void S_PlayerList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PlayerList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.myplayerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PlayerList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 myPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.myplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PlayerInfo players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PlayerList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PlayerList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 myPlayerId = 1;
  if (this->_internal_myplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_myplayerid(), target);
  }

  // repeated .Protocol.PlayerInfo players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PlayerList)
  return target;
}

size_t S_PlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PlayerList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 myPlayerId = 1;
  if (this->_internal_myplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_myplayerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PlayerList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PlayerList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PlayerList::GetClassData() const { return &_class_data_; }


void S_PlayerList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PlayerList*>(&to_msg);
  auto& from = static_cast<const S_PlayerList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PlayerList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_myplayerid() != 0) {
    _this->_internal_set_myplayerid(from._internal_myplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PlayerList::CopyFrom(const S_PlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PlayerList::IsInitialized() const {
  return true;
}

void S_PlayerList::InternalSwap(S_PlayerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.myplayerid_, other->_impl_.myplayerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PlayerList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class S_BroadcastPlayerEnter::_Internal {
 public:
  static const ::Protocol::PlayerInfo& player(const S_BroadcastPlayerEnter* msg);
};

const ::Protocol::PlayerInfo&
S_BroadcastPlayerEnter::_Internal::player(const S_BroadcastPlayerEnter* msg) {
  return *msg->_impl_.player_;
}
S_BroadcastPlayerEnter::S_BroadcastPlayerEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BroadcastPlayerEnter)
}
S_BroadcastPlayerEnter::S_BroadcastPlayerEnter(const S_BroadcastPlayerEnter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BroadcastPlayerEnter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::PlayerInfo(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BroadcastPlayerEnter)
}

inline void S_BroadcastPlayerEnter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BroadcastPlayerEnter::~S_BroadcastPlayerEnter() {
  // @@protoc_insertion_point(destructor:Protocol.S_BroadcastPlayerEnter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BroadcastPlayerEnter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_BroadcastPlayerEnter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BroadcastPlayerEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BroadcastPlayerEnter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BroadcastPlayerEnter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PlayerInfo player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BroadcastPlayerEnter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BroadcastPlayerEnter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BroadcastPlayerEnter)
  return target;
}

size_t S_BroadcastPlayerEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BroadcastPlayerEnter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BroadcastPlayerEnter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BroadcastPlayerEnter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BroadcastPlayerEnter::GetClassData() const { return &_class_data_; }


void S_BroadcastPlayerEnter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BroadcastPlayerEnter*>(&to_msg);
  auto& from = static_cast<const S_BroadcastPlayerEnter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BroadcastPlayerEnter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::PlayerInfo::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BroadcastPlayerEnter::CopyFrom(const S_BroadcastPlayerEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BroadcastPlayerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BroadcastPlayerEnter::IsInitialized() const {
  return true;
}

void S_BroadcastPlayerEnter::InternalSwap(S_BroadcastPlayerEnter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BroadcastPlayerEnter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class C_LeaveGame::_Internal {
 public:
};

C_LeaveGame::C_LeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LeaveGame)
}
C_LeaveGame::C_LeaveGame(const C_LeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LeaveGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reason_ = from._impl_.reason_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LeaveGame)
}

inline void C_LeaveGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_LeaveGame::~C_LeaveGame() {
  // @@protoc_insertion_point(destructor:Protocol.C_LeaveGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LeaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_LeaveGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LeaveGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LeaveGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ELeaveReason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::Protocol::ELeaveReason>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LeaveGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LeaveGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ELeaveReason reason = 1;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LeaveGame)
  return target;
}

size_t C_LeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LeaveGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ELeaveReason reason = 1;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LeaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LeaveGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LeaveGame::GetClassData() const { return &_class_data_; }


void C_LeaveGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LeaveGame*>(&to_msg);
  auto& from = static_cast<const C_LeaveGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LeaveGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LeaveGame::CopyFrom(const C_LeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LeaveGame::IsInitialized() const {
  return true;
}

void C_LeaveGame::InternalSwap(C_LeaveGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reason_, other->_impl_.reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LeaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_LeaveGame::_Internal {
 public:
};

S_LeaveGame::S_LeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LeaveGame)
}
S_LeaveGame::S_LeaveGame(const S_LeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LeaveGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LeaveGame)
}

inline void S_LeaveGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LeaveGame::~S_LeaveGame() {
  // @@protoc_insertion_point(destructor:Protocol.S_LeaveGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LeaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LeaveGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LeaveGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LeaveGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LeaveGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LeaveGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LeaveGame)
  return target;
}

size_t S_LeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LeaveGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 success = 1;
  if (this->_internal_success() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_success());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LeaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LeaveGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LeaveGame::GetClassData() const { return &_class_data_; }


void S_LeaveGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LeaveGame*>(&to_msg);
  auto& from = static_cast<const S_LeaveGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LeaveGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LeaveGame::CopyFrom(const S_LeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LeaveGame::IsInitialized() const {
  return true;
}

void S_LeaveGame::InternalSwap(S_LeaveGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LeaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_BroadcastPlayerLeave::_Internal {
 public:
};

S_BroadcastPlayerLeave::S_BroadcastPlayerLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BroadcastPlayerLeave)
}
S_BroadcastPlayerLeave::S_BroadcastPlayerLeave(const S_BroadcastPlayerLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BroadcastPlayerLeave* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BroadcastPlayerLeave)
}

inline void S_BroadcastPlayerLeave::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BroadcastPlayerLeave::~S_BroadcastPlayerLeave() {
  // @@protoc_insertion_point(destructor:Protocol.S_BroadcastPlayerLeave)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BroadcastPlayerLeave::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_BroadcastPlayerLeave::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BroadcastPlayerLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BroadcastPlayerLeave)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BroadcastPlayerLeave::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ELeaveReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::Protocol::ELeaveReason>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BroadcastPlayerLeave::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BroadcastPlayerLeave)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .Protocol.ELeaveReason reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BroadcastPlayerLeave)
  return target;
}

size_t S_BroadcastPlayerLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BroadcastPlayerLeave)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  // .Protocol.ELeaveReason reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BroadcastPlayerLeave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BroadcastPlayerLeave::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BroadcastPlayerLeave::GetClassData() const { return &_class_data_; }


void S_BroadcastPlayerLeave::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BroadcastPlayerLeave*>(&to_msg);
  auto& from = static_cast<const S_BroadcastPlayerLeave&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BroadcastPlayerLeave)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BroadcastPlayerLeave::CopyFrom(const S_BroadcastPlayerLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BroadcastPlayerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BroadcastPlayerLeave::IsInitialized() const {
  return true;
}

void S_BroadcastPlayerLeave::InternalSwap(S_BroadcastPlayerLeave* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BroadcastPlayerLeave, _impl_.reason_)
      + sizeof(S_BroadcastPlayerLeave::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(S_BroadcastPlayerLeave, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BroadcastPlayerLeave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class C_PlayerMoveRequest::_Internal {
 public:
  static const ::Protocol::Vector2Info& clickworldpos(const C_PlayerMoveRequest* msg);
};

const ::Protocol::Vector2Info&
C_PlayerMoveRequest::_Internal::clickworldpos(const C_PlayerMoveRequest* msg) {
  return *msg->_impl_.clickworldpos_;
}
C_PlayerMoveRequest::C_PlayerMoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PlayerMoveRequest)
}
C_PlayerMoveRequest::C_PlayerMoveRequest(const C_PlayerMoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PlayerMoveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clickworldpos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clickworldpos()) {
    _this->_impl_.clickworldpos_ = new ::Protocol::Vector2Info(*from._impl_.clickworldpos_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PlayerMoveRequest)
}

inline void C_PlayerMoveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clickworldpos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PlayerMoveRequest::~C_PlayerMoveRequest() {
  // @@protoc_insertion_point(destructor:Protocol.C_PlayerMoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PlayerMoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.clickworldpos_;
}

void C_PlayerMoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PlayerMoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PlayerMoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.clickworldpos_ != nullptr) {
    delete _impl_.clickworldpos_;
  }
  _impl_.clickworldpos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PlayerMoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Vector2Info clickWorldPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clickworldpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PlayerMoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PlayerMoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Vector2Info clickWorldPos = 1;
  if (this->_internal_has_clickworldpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::clickworldpos(this),
        _Internal::clickworldpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PlayerMoveRequest)
  return target;
}

size_t C_PlayerMoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PlayerMoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector2Info clickWorldPos = 1;
  if (this->_internal_has_clickworldpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clickworldpos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PlayerMoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PlayerMoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PlayerMoveRequest::GetClassData() const { return &_class_data_; }


void C_PlayerMoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PlayerMoveRequest*>(&to_msg);
  auto& from = static_cast<const C_PlayerMoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PlayerMoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clickworldpos()) {
    _this->_internal_mutable_clickworldpos()->::Protocol::Vector2Info::MergeFrom(
        from._internal_clickworldpos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PlayerMoveRequest::CopyFrom(const C_PlayerMoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PlayerMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PlayerMoveRequest::IsInitialized() const {
  return true;
}

void C_PlayerMoveRequest::InternalSwap(C_PlayerMoveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.clickworldpos_, other->_impl_.clickworldpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PlayerMoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class S_PlayerMoveReply::_Internal {
 public:
  static const ::Protocol::Vector2Info& newpos(const S_PlayerMoveReply* msg);
};

const ::Protocol::Vector2Info&
S_PlayerMoveReply::_Internal::newpos(const S_PlayerMoveReply* msg) {
  return *msg->_impl_.newpos_;
}
S_PlayerMoveReply::S_PlayerMoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PlayerMoveReply)
}
S_PlayerMoveReply::S_PlayerMoveReply(const S_PlayerMoveReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PlayerMoveReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newpos_){nullptr}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.clientseq_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.tick_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_newpos()) {
    _this->_impl_.newpos_ = new ::Protocol::Vector2Info(*from._impl_.newpos_);
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PlayerMoveReply)
}

inline void S_PlayerMoveReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newpos_){nullptr}
    , decltype(_impl_.playerid_){0}
    , decltype(_impl_.clientseq_){0}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.tick_){0}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PlayerMoveReply::~S_PlayerMoveReply() {
  // @@protoc_insertion_point(destructor:Protocol.S_PlayerMoveReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PlayerMoveReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.newpos_;
}

void S_PlayerMoveReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PlayerMoveReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PlayerMoveReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.newpos_ != nullptr) {
    delete _impl_.newpos_;
  }
  _impl_.newpos_ = nullptr;
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PlayerMoveReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 clientSeq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.clientseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EMoveResult result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::Protocol::EMoveResult>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 tick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector2Info newPos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_newpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EDirection direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::Protocol::EDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PlayerMoveReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PlayerMoveReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 clientSeq = 2;
  if (this->_internal_clientseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_clientseq(), target);
  }

  // .Protocol.EMoveResult result = 3;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  // int32 tick = 4;
  if (this->_internal_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tick(), target);
  }

  // .Protocol.Vector2Info newPos = 5;
  if (this->_internal_has_newpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::newpos(this),
        _Internal::newpos(this).GetCachedSize(), target, stream);
  }

  // .Protocol.EDirection direction = 6;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PlayerMoveReply)
  return target;
}

size_t S_PlayerMoveReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PlayerMoveReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector2Info newPos = 5;
  if (this->_internal_has_newpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newpos_);
  }

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  // int32 clientSeq = 2;
  if (this->_internal_clientseq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientseq());
  }

  // .Protocol.EMoveResult result = 3;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 tick = 4;
  if (this->_internal_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tick());
  }

  // .Protocol.EDirection direction = 6;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PlayerMoveReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PlayerMoveReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PlayerMoveReply::GetClassData() const { return &_class_data_; }


void S_PlayerMoveReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PlayerMoveReply*>(&to_msg);
  auto& from = static_cast<const S_PlayerMoveReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PlayerMoveReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_newpos()) {
    _this->_internal_mutable_newpos()->::Protocol::Vector2Info::MergeFrom(
        from._internal_newpos());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_clientseq() != 0) {
    _this->_internal_set_clientseq(from._internal_clientseq());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_tick() != 0) {
    _this->_internal_set_tick(from._internal_tick());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PlayerMoveReply::CopyFrom(const S_PlayerMoveReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PlayerMoveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PlayerMoveReply::IsInitialized() const {
  return true;
}

void S_PlayerMoveReply::InternalSwap(S_PlayerMoveReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PlayerMoveReply, _impl_.direction_)
      + sizeof(S_PlayerMoveReply::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(S_PlayerMoveReply, _impl_.newpos_)>(
          reinterpret_cast<char*>(&_impl_.newpos_),
          reinterpret_cast<char*>(&other->_impl_.newpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PlayerMoveReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class S_BroadcastPlayerMove::_Internal {
 public:
};

S_BroadcastPlayerMove::S_BroadcastPlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BroadcastPlayerMove)
}
S_BroadcastPlayerMove::S_BroadcastPlayerMove(const S_BroadcastPlayerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BroadcastPlayerMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playermoves_){from._impl_.playermoves_}
    , decltype(_impl_.tick_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tick_ = from._impl_.tick_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BroadcastPlayerMove)
}

inline void S_BroadcastPlayerMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playermoves_){arena}
    , decltype(_impl_.tick_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BroadcastPlayerMove::~S_BroadcastPlayerMove() {
  // @@protoc_insertion_point(destructor:Protocol.S_BroadcastPlayerMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BroadcastPlayerMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playermoves_.~RepeatedPtrField();
}

void S_BroadcastPlayerMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BroadcastPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BroadcastPlayerMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playermoves_.Clear();
  _impl_.tick_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BroadcastPlayerMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PlayerMoveInfo playerMoves = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playermoves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BroadcastPlayerMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BroadcastPlayerMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tick = 1;
  if (this->_internal_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tick(), target);
  }

  // repeated .Protocol.PlayerMoveInfo playerMoves = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playermoves_size()); i < n; i++) {
    const auto& repfield = this->_internal_playermoves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BroadcastPlayerMove)
  return target;
}

size_t S_BroadcastPlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BroadcastPlayerMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerMoveInfo playerMoves = 2;
  total_size += 1UL * this->_internal_playermoves_size();
  for (const auto& msg : this->_impl_.playermoves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 tick = 1;
  if (this->_internal_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tick());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BroadcastPlayerMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BroadcastPlayerMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BroadcastPlayerMove::GetClassData() const { return &_class_data_; }


void S_BroadcastPlayerMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BroadcastPlayerMove*>(&to_msg);
  auto& from = static_cast<const S_BroadcastPlayerMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BroadcastPlayerMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playermoves_.MergeFrom(from._impl_.playermoves_);
  if (from._internal_tick() != 0) {
    _this->_internal_set_tick(from._internal_tick());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BroadcastPlayerMove::CopyFrom(const S_BroadcastPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BroadcastPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BroadcastPlayerMove::IsInitialized() const {
  return true;
}

void S_BroadcastPlayerMove::InternalSwap(S_BroadcastPlayerMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playermoves_.InternalSwap(&other->_impl_.playermoves_);
  swap(_impl_.tick_, other->_impl_.tick_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BroadcastPlayerMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class S_ChangeRoomBegin::_Internal {
 public:
};

S_ChangeRoomBegin::S_ChangeRoomBegin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ChangeRoomBegin)
}
S_ChangeRoomBegin::S_ChangeRoomBegin(const S_ChangeRoomBegin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ChangeRoomBegin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transitionid_){}
    , decltype(_impl_.mapid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.transitionid_, &from._impl_.transitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mapid_) -
    reinterpret_cast<char*>(&_impl_.transitionid_)) + sizeof(_impl_.mapid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ChangeRoomBegin)
}

inline void S_ChangeRoomBegin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transitionid_){0}
    , decltype(_impl_.mapid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ChangeRoomBegin::~S_ChangeRoomBegin() {
  // @@protoc_insertion_point(destructor:Protocol.S_ChangeRoomBegin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ChangeRoomBegin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ChangeRoomBegin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ChangeRoomBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ChangeRoomBegin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.transitionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mapid_) -
      reinterpret_cast<char*>(&_impl_.transitionid_)) + sizeof(_impl_.mapid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ChangeRoomBegin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 transitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.transitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mapId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ChangeRoomBegin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ChangeRoomBegin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 transitionId = 1;
  if (this->_internal_transitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_transitionid(), target);
  }

  // int32 mapId = 2;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ChangeRoomBegin)
  return target;
}

size_t S_ChangeRoomBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ChangeRoomBegin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 transitionId = 1;
  if (this->_internal_transitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_transitionid());
  }

  // int32 mapId = 2;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ChangeRoomBegin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ChangeRoomBegin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ChangeRoomBegin::GetClassData() const { return &_class_data_; }


void S_ChangeRoomBegin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ChangeRoomBegin*>(&to_msg);
  auto& from = static_cast<const S_ChangeRoomBegin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ChangeRoomBegin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_transitionid() != 0) {
    _this->_internal_set_transitionid(from._internal_transitionid());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ChangeRoomBegin::CopyFrom(const S_ChangeRoomBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ChangeRoomBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ChangeRoomBegin::IsInitialized() const {
  return true;
}

void S_ChangeRoomBegin::InternalSwap(S_ChangeRoomBegin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ChangeRoomBegin, _impl_.mapid_)
      + sizeof(S_ChangeRoomBegin::_impl_.mapid_)
      - PROTOBUF_FIELD_OFFSET(S_ChangeRoomBegin, _impl_.transitionid_)>(
          reinterpret_cast<char*>(&_impl_.transitionid_),
          reinterpret_cast<char*>(&other->_impl_.transitionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ChangeRoomBegin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class C_ChangeRoomReady::_Internal {
 public:
};

C_ChangeRoomReady::C_ChangeRoomReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ChangeRoomReady)
}
C_ChangeRoomReady::C_ChangeRoomReady(const C_ChangeRoomReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ChangeRoomReady* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.transitionid_ = from._impl_.transitionid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ChangeRoomReady)
}

inline void C_ChangeRoomReady::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transitionid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ChangeRoomReady::~C_ChangeRoomReady() {
  // @@protoc_insertion_point(destructor:Protocol.C_ChangeRoomReady)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ChangeRoomReady::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ChangeRoomReady::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ChangeRoomReady::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ChangeRoomReady)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transitionid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ChangeRoomReady::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 transitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.transitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ChangeRoomReady::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ChangeRoomReady)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 transitionId = 1;
  if (this->_internal_transitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_transitionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ChangeRoomReady)
  return target;
}

size_t C_ChangeRoomReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ChangeRoomReady)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 transitionId = 1;
  if (this->_internal_transitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_transitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ChangeRoomReady::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ChangeRoomReady::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ChangeRoomReady::GetClassData() const { return &_class_data_; }


void C_ChangeRoomReady::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ChangeRoomReady*>(&to_msg);
  auto& from = static_cast<const C_ChangeRoomReady&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ChangeRoomReady)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_transitionid() != 0) {
    _this->_internal_set_transitionid(from._internal_transitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ChangeRoomReady::CopyFrom(const C_ChangeRoomReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ChangeRoomReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ChangeRoomReady::IsInitialized() const {
  return true;
}

void C_ChangeRoomReady::InternalSwap(C_ChangeRoomReady* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.transitionid_, other->_impl_.transitionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ChangeRoomReady::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class S_ChangeRoomCommit::_Internal {
 public:
  static const ::Protocol::S_PlayerList& snapshots(const S_ChangeRoomCommit* msg);
};

const ::Protocol::S_PlayerList&
S_ChangeRoomCommit::_Internal::snapshots(const S_ChangeRoomCommit* msg) {
  return *msg->_impl_.snapshots_;
}
S_ChangeRoomCommit::S_ChangeRoomCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ChangeRoomCommit)
}
S_ChangeRoomCommit::S_ChangeRoomCommit(const S_ChangeRoomCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ChangeRoomCommit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshots_){nullptr}
    , decltype(_impl_.transitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_snapshots()) {
    _this->_impl_.snapshots_ = new ::Protocol::S_PlayerList(*from._impl_.snapshots_);
  }
  _this->_impl_.transitionid_ = from._impl_.transitionid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ChangeRoomCommit)
}

inline void S_ChangeRoomCommit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshots_){nullptr}
    , decltype(_impl_.transitionid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ChangeRoomCommit::~S_ChangeRoomCommit() {
  // @@protoc_insertion_point(destructor:Protocol.S_ChangeRoomCommit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ChangeRoomCommit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.snapshots_;
}

void S_ChangeRoomCommit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ChangeRoomCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ChangeRoomCommit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.snapshots_ != nullptr) {
    delete _impl_.snapshots_;
  }
  _impl_.snapshots_ = nullptr;
  _impl_.transitionid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ChangeRoomCommit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 transitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.transitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.S_PlayerList snapshots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ChangeRoomCommit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ChangeRoomCommit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 transitionId = 1;
  if (this->_internal_transitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_transitionid(), target);
  }

  // .Protocol.S_PlayerList snapshots = 2;
  if (this->_internal_has_snapshots()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::snapshots(this),
        _Internal::snapshots(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ChangeRoomCommit)
  return target;
}

size_t S_ChangeRoomCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ChangeRoomCommit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.S_PlayerList snapshots = 2;
  if (this->_internal_has_snapshots()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.snapshots_);
  }

  // int32 transitionId = 1;
  if (this->_internal_transitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_transitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ChangeRoomCommit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ChangeRoomCommit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ChangeRoomCommit::GetClassData() const { return &_class_data_; }


void S_ChangeRoomCommit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ChangeRoomCommit*>(&to_msg);
  auto& from = static_cast<const S_ChangeRoomCommit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ChangeRoomCommit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_snapshots()) {
    _this->_internal_mutable_snapshots()->::Protocol::S_PlayerList::MergeFrom(
        from._internal_snapshots());
  }
  if (from._internal_transitionid() != 0) {
    _this->_internal_set_transitionid(from._internal_transitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ChangeRoomCommit::CopyFrom(const S_ChangeRoomCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ChangeRoomCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ChangeRoomCommit::IsInitialized() const {
  return true;
}

void S_ChangeRoomCommit::InternalSwap(S_ChangeRoomCommit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ChangeRoomCommit, _impl_.transitionid_)
      + sizeof(S_ChangeRoomCommit::_impl_.transitionid_)
      - PROTOBUF_FIELD_OFFSET(S_ChangeRoomCommit, _impl_.snapshots_)>(
          reinterpret_cast<char*>(&_impl_.snapshots_),
          reinterpret_cast<char*>(&other->_impl_.snapshots_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ChangeRoomCommit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class S_SpawnMonster::_Internal {
 public:
};

S_SpawnMonster::S_SpawnMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SpawnMonster)
}
S_SpawnMonster::S_SpawnMonster(const S_SpawnMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SpawnMonster* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){}
    , decltype(_impl_.monstertypeid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.monsterid_, &from._impl_.monsterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dir_) -
    reinterpret_cast<char*>(&_impl_.monsterid_)) + sizeof(_impl_.dir_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SpawnMonster)
}

inline void S_SpawnMonster::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){0}
    , decltype(_impl_.monstertypeid_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.dir_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SpawnMonster::~S_SpawnMonster() {
  // @@protoc_insertion_point(destructor:Protocol.S_SpawnMonster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SpawnMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SpawnMonster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SpawnMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SpawnMonster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.monsterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dir_) -
      reinterpret_cast<char*>(&_impl_.monsterid_)) + sizeof(_impl_.dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SpawnMonster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monsterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 monsterTypeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.monstertypeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EDirection dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dir(static_cast<::Protocol::EDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SpawnMonster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SpawnMonster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // int32 monsterTypeId = 2;
  if (this->_internal_monstertypeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_monstertypeid(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // .Protocol.EDirection dir = 5;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SpawnMonster)
  return target;
}

size_t S_SpawnMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SpawnMonster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monsterid());
  }

  // int32 monsterTypeId = 2;
  if (this->_internal_monstertypeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monstertypeid());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // .Protocol.EDirection dir = 5;
  if (this->_internal_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SpawnMonster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SpawnMonster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SpawnMonster::GetClassData() const { return &_class_data_; }


void S_SpawnMonster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SpawnMonster*>(&to_msg);
  auto& from = static_cast<const S_SpawnMonster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SpawnMonster)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_monstertypeid() != 0) {
    _this->_internal_set_monstertypeid(from._internal_monstertypeid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SpawnMonster::CopyFrom(const S_SpawnMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SpawnMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SpawnMonster::IsInitialized() const {
  return true;
}

void S_SpawnMonster::InternalSwap(S_SpawnMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SpawnMonster, _impl_.dir_)
      + sizeof(S_SpawnMonster::_impl_.dir_)
      - PROTOBUF_FIELD_OFFSET(S_SpawnMonster, _impl_.monsterid_)>(
          reinterpret_cast<char*>(&_impl_.monsterid_),
          reinterpret_cast<char*>(&other->_impl_.monsterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SpawnMonster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class S_DespawnMonster::_Internal {
 public:
};

S_DespawnMonster::S_DespawnMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DespawnMonster)
}
S_DespawnMonster::S_DespawnMonster(const S_DespawnMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DespawnMonster* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.monsterid_, &from._impl_.monsterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.monsterid_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DespawnMonster)
}

inline void S_DespawnMonster::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){0}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_DespawnMonster::~S_DespawnMonster() {
  // @@protoc_insertion_point(destructor:Protocol.S_DespawnMonster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DespawnMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DespawnMonster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DespawnMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DespawnMonster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.monsterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.monsterid_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DespawnMonster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monsterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EDespawnReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::Protocol::EDespawnReason>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DespawnMonster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DespawnMonster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // .Protocol.EDespawnReason reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DespawnMonster)
  return target;
}

size_t S_DespawnMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DespawnMonster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monsterid());
  }

  // .Protocol.EDespawnReason reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DespawnMonster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DespawnMonster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DespawnMonster::GetClassData() const { return &_class_data_; }


void S_DespawnMonster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DespawnMonster*>(&to_msg);
  auto& from = static_cast<const S_DespawnMonster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DespawnMonster)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DespawnMonster::CopyFrom(const S_DespawnMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DespawnMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DespawnMonster::IsInitialized() const {
  return true;
}

void S_DespawnMonster::InternalSwap(S_DespawnMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_DespawnMonster, _impl_.reason_)
      + sizeof(S_DespawnMonster::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(S_DespawnMonster, _impl_.monsterid_)>(
          reinterpret_cast<char*>(&_impl_.monsterid_),
          reinterpret_cast<char*>(&other->_impl_.monsterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DespawnMonster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class S_BroadcastMonsterMove::_Internal {
 public:
};

S_BroadcastMonsterMove::S_BroadcastMonsterMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BroadcastMonsterMove)
}
S_BroadcastMonsterMove::S_BroadcastMonsterMove(const S_BroadcastMonsterMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BroadcastMonsterMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.monsterid_, &from._impl_.monsterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dir_) -
    reinterpret_cast<char*>(&_impl_.monsterid_)) + sizeof(_impl_.dir_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BroadcastMonsterMove)
}

inline void S_BroadcastMonsterMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.dir_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BroadcastMonsterMove::~S_BroadcastMonsterMove() {
  // @@protoc_insertion_point(destructor:Protocol.S_BroadcastMonsterMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BroadcastMonsterMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_BroadcastMonsterMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BroadcastMonsterMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BroadcastMonsterMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.monsterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dir_) -
      reinterpret_cast<char*>(&_impl_.monsterid_)) + sizeof(_impl_.dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BroadcastMonsterMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monsterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EDirection dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dir(static_cast<::Protocol::EDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BroadcastMonsterMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BroadcastMonsterMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // .Protocol.EDirection dir = 4;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BroadcastMonsterMove)
  return target;
}

size_t S_BroadcastMonsterMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BroadcastMonsterMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monsterid());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // .Protocol.EDirection dir = 4;
  if (this->_internal_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BroadcastMonsterMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BroadcastMonsterMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BroadcastMonsterMove::GetClassData() const { return &_class_data_; }


void S_BroadcastMonsterMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BroadcastMonsterMove*>(&to_msg);
  auto& from = static_cast<const S_BroadcastMonsterMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BroadcastMonsterMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BroadcastMonsterMove::CopyFrom(const S_BroadcastMonsterMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BroadcastMonsterMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BroadcastMonsterMove::IsInitialized() const {
  return true;
}

void S_BroadcastMonsterMove::InternalSwap(S_BroadcastMonsterMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BroadcastMonsterMove, _impl_.dir_)
      + sizeof(S_BroadcastMonsterMove::_impl_.dir_)
      - PROTOBUF_FIELD_OFFSET(S_BroadcastMonsterMove, _impl_.monsterid_)>(
          reinterpret_cast<char*>(&_impl_.monsterid_),
          reinterpret_cast<char*>(&other->_impl_.monsterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BroadcastMonsterMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class S_BroadcastMonsterAttack::_Internal {
 public:
};

S_BroadcastMonsterAttack::S_BroadcastMonsterAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BroadcastMonsterAttack)
}
S_BroadcastMonsterAttack::S_BroadcastMonsterAttack(const S_BroadcastMonsterAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BroadcastMonsterAttack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){}
    , decltype(_impl_.targetpid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.monsterid_, &from._impl_.monsterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.targetpid_) -
    reinterpret_cast<char*>(&_impl_.monsterid_)) + sizeof(_impl_.targetpid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BroadcastMonsterAttack)
}

inline void S_BroadcastMonsterAttack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){0}
    , decltype(_impl_.targetpid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BroadcastMonsterAttack::~S_BroadcastMonsterAttack() {
  // @@protoc_insertion_point(destructor:Protocol.S_BroadcastMonsterAttack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BroadcastMonsterAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_BroadcastMonsterAttack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BroadcastMonsterAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BroadcastMonsterAttack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.monsterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.targetpid_) -
      reinterpret_cast<char*>(&_impl_.monsterid_)) + sizeof(_impl_.targetpid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BroadcastMonsterAttack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monsterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 targetPid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BroadcastMonsterAttack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BroadcastMonsterAttack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // int32 targetPid = 2;
  if (this->_internal_targetpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetpid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BroadcastMonsterAttack)
  return target;
}

size_t S_BroadcastMonsterAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BroadcastMonsterAttack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monsterid());
  }

  // int32 targetPid = 2;
  if (this->_internal_targetpid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetpid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BroadcastMonsterAttack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BroadcastMonsterAttack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BroadcastMonsterAttack::GetClassData() const { return &_class_data_; }


void S_BroadcastMonsterAttack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BroadcastMonsterAttack*>(&to_msg);
  auto& from = static_cast<const S_BroadcastMonsterAttack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BroadcastMonsterAttack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_targetpid() != 0) {
    _this->_internal_set_targetpid(from._internal_targetpid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BroadcastMonsterAttack::CopyFrom(const S_BroadcastMonsterAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BroadcastMonsterAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BroadcastMonsterAttack::IsInitialized() const {
  return true;
}

void S_BroadcastMonsterAttack::InternalSwap(S_BroadcastMonsterAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BroadcastMonsterAttack, _impl_.targetpid_)
      + sizeof(S_BroadcastMonsterAttack::_impl_.targetpid_)
      - PROTOBUF_FIELD_OFFSET(S_BroadcastMonsterAttack, _impl_.monsterid_)>(
          reinterpret_cast<char*>(&_impl_.monsterid_),
          reinterpret_cast<char*>(&other->_impl_.monsterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BroadcastMonsterAttack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class S_BroadcastMonsterDeath::_Internal {
 public:
};

S_BroadcastMonsterDeath::S_BroadcastMonsterDeath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BroadcastMonsterDeath)
}
S_BroadcastMonsterDeath::S_BroadcastMonsterDeath(const S_BroadcastMonsterDeath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BroadcastMonsterDeath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.monsterid_ = from._impl_.monsterid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BroadcastMonsterDeath)
}

inline void S_BroadcastMonsterDeath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BroadcastMonsterDeath::~S_BroadcastMonsterDeath() {
  // @@protoc_insertion_point(destructor:Protocol.S_BroadcastMonsterDeath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BroadcastMonsterDeath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_BroadcastMonsterDeath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BroadcastMonsterDeath::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BroadcastMonsterDeath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.monsterid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BroadcastMonsterDeath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monsterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BroadcastMonsterDeath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BroadcastMonsterDeath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BroadcastMonsterDeath)
  return target;
}

size_t S_BroadcastMonsterDeath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BroadcastMonsterDeath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterId = 1;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monsterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BroadcastMonsterDeath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BroadcastMonsterDeath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BroadcastMonsterDeath::GetClassData() const { return &_class_data_; }


void S_BroadcastMonsterDeath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BroadcastMonsterDeath*>(&to_msg);
  auto& from = static_cast<const S_BroadcastMonsterDeath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BroadcastMonsterDeath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BroadcastMonsterDeath::CopyFrom(const S_BroadcastMonsterDeath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BroadcastMonsterDeath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BroadcastMonsterDeath::IsInitialized() const {
  return true;
}

void S_BroadcastMonsterDeath::InternalSwap(S_BroadcastMonsterDeath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.monsterid_, other->_impl_.monsterid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BroadcastMonsterDeath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class C_PlayerAttackRequest::_Internal {
 public:
};

C_PlayerAttackRequest::C_PlayerAttackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PlayerAttackRequest)
}
C_PlayerAttackRequest::C_PlayerAttackRequest(const C_PlayerAttackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_PlayerAttackRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PlayerAttackRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PlayerAttackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PlayerAttackRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_PlayerAttackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class S_BroadcastPlayerAttack::_Internal {
 public:
};

S_BroadcastPlayerAttack::S_BroadcastPlayerAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BroadcastPlayerAttack)
}
S_BroadcastPlayerAttack::S_BroadcastPlayerAttack(const S_BroadcastPlayerAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BroadcastPlayerAttack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.hpafter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hpafter_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hpafter_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BroadcastPlayerAttack)
}

inline void S_BroadcastPlayerAttack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0}
    , decltype(_impl_.targetid_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.hpafter_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BroadcastPlayerAttack::~S_BroadcastPlayerAttack() {
  // @@protoc_insertion_point(destructor:Protocol.S_BroadcastPlayerAttack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BroadcastPlayerAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_BroadcastPlayerAttack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BroadcastPlayerAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BroadcastPlayerAttack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hpafter_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hpafter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BroadcastPlayerAttack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 targetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hpAfter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hpafter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BroadcastPlayerAttack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BroadcastPlayerAttack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 targetId = 2;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetid(), target);
  }

  // int32 damage = 3;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_damage(), target);
  }

  // int32 hpAfter = 4;
  if (this->_internal_hpafter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hpafter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BroadcastPlayerAttack)
  return target;
}

size_t S_BroadcastPlayerAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BroadcastPlayerAttack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  // int32 targetId = 2;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetid());
  }

  // int32 damage = 3;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // int32 hpAfter = 4;
  if (this->_internal_hpafter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hpafter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BroadcastPlayerAttack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BroadcastPlayerAttack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BroadcastPlayerAttack::GetClassData() const { return &_class_data_; }


void S_BroadcastPlayerAttack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BroadcastPlayerAttack*>(&to_msg);
  auto& from = static_cast<const S_BroadcastPlayerAttack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BroadcastPlayerAttack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_hpafter() != 0) {
    _this->_internal_set_hpafter(from._internal_hpafter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BroadcastPlayerAttack::CopyFrom(const S_BroadcastPlayerAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BroadcastPlayerAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BroadcastPlayerAttack::IsInitialized() const {
  return true;
}

void S_BroadcastPlayerAttack::InternalSwap(S_BroadcastPlayerAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BroadcastPlayerAttack, _impl_.hpafter_)
      + sizeof(S_BroadcastPlayerAttack::_impl_.hpafter_)
      - PROTOBUF_FIELD_OFFSET(S_BroadcastPlayerAttack, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BroadcastPlayerAttack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class Vector2Info::_Internal {
 public:
};

Vector2Info::Vector2Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Vector2Info)
}
Vector2Info::Vector2Info(const Vector2Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Vector2Info)
}

inline void Vector2Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2Info::~Vector2Info() {
  // @@protoc_insertion_point(destructor:Protocol.Vector2Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Vector2Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Vector2Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Vector2Info)
  return target;
}

size_t Vector2Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Vector2Info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2Info::GetClassData() const { return &_class_data_; }


void Vector2Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2Info*>(&to_msg);
  auto& from = static_cast<const Vector2Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Vector2Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2Info::CopyFrom(const Vector2Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Vector2Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2Info::IsInitialized() const {
  return true;
}

void Vector2Info::InternalSwap(Vector2Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2Info, _impl_.y_)
      + sizeof(Vector2Info::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2Info, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// ===================================================================

class PlayerMoveInfo::_Internal {
 public:
  static const ::Protocol::Vector2Info& newpos(const PlayerMoveInfo* msg);
};

const ::Protocol::Vector2Info&
PlayerMoveInfo::_Internal::newpos(const PlayerMoveInfo* msg) {
  return *msg->_impl_.newpos_;
}
PlayerMoveInfo::PlayerMoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PlayerMoveInfo)
}
PlayerMoveInfo::PlayerMoveInfo(const PlayerMoveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerMoveInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newpos_){nullptr}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_newpos()) {
    _this->_impl_.newpos_ = new ::Protocol::Vector2Info(*from._impl_.newpos_);
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PlayerMoveInfo)
}

inline void PlayerMoveInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newpos_){nullptr}
    , decltype(_impl_.playerid_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerMoveInfo::~PlayerMoveInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PlayerMoveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerMoveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.newpos_;
}

void PlayerMoveInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerMoveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PlayerMoveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.newpos_ != nullptr) {
    delete _impl_.newpos_;
  }
  _impl_.newpos_ = nullptr;
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMoveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::Protocol::EDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector2Info newPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EMoveResult result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::Protocol::EMoveResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerMoveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PlayerMoveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .Protocol.EDirection direction = 2;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // .Protocol.Vector2Info newPos = 3;
  if (this->_internal_has_newpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::newpos(this),
        _Internal::newpos(this).GetCachedSize(), target, stream);
  }

  // .Protocol.EMoveResult result = 4;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PlayerMoveInfo)
  return target;
}

size_t PlayerMoveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PlayerMoveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector2Info newPos = 3;
  if (this->_internal_has_newpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newpos_);
  }

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  // .Protocol.EDirection direction = 2;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .Protocol.EMoveResult result = 4;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerMoveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerMoveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerMoveInfo::GetClassData() const { return &_class_data_; }


void PlayerMoveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerMoveInfo*>(&to_msg);
  auto& from = static_cast<const PlayerMoveInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PlayerMoveInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_newpos()) {
    _this->_internal_mutable_newpos()->::Protocol::Vector2Info::MergeFrom(
        from._internal_newpos());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerMoveInfo::CopyFrom(const PlayerMoveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PlayerMoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMoveInfo::IsInitialized() const {
  return true;
}

void PlayerMoveInfo::InternalSwap(PlayerMoveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerMoveInfo, _impl_.result_)
      + sizeof(PlayerMoveInfo::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(PlayerMoveInfo, _impl_.newpos_)>(
          reinterpret_cast<char*>(&_impl_.newpos_),
          reinterpret_cast<char*>(&other->_impl_.newpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMoveInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[27]);
}

// ===================================================================

class CharacterSummaryInfo::_Internal {
 public:
};

CharacterSummaryInfo::CharacterSummaryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.CharacterSummaryInfo)
}
CharacterSummaryInfo::CharacterSummaryInfo(const CharacterSummaryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterSummaryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.gender_){}
    , decltype(_impl_.region_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.region_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.region_));
  // @@protoc_insertion_point(copy_constructor:Protocol.CharacterSummaryInfo)
}

inline void CharacterSummaryInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.gender_){0}
    , decltype(_impl_.region_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CharacterSummaryInfo::~CharacterSummaryInfo() {
  // @@protoc_insertion_point(destructor:Protocol.CharacterSummaryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterSummaryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void CharacterSummaryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterSummaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.CharacterSummaryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.region_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.region_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterSummaryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.CharacterSummaryInfo.username"));
        } else
          goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EGender gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::Protocol::EGender>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ERegion region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_region(static_cast<::Protocol::ERegion>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterSummaryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.CharacterSummaryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.CharacterSummaryInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // .Protocol.EGender gender = 3;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gender(), target);
  }

  // .Protocol.ERegion region = 4;
  if (this->_internal_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.CharacterSummaryInfo)
  return target;
}

size_t CharacterSummaryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.CharacterSummaryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // .Protocol.EGender gender = 3;
  if (this->_internal_gender() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // .Protocol.ERegion region = 4;
  if (this->_internal_region() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterSummaryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterSummaryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterSummaryInfo::GetClassData() const { return &_class_data_; }


void CharacterSummaryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterSummaryInfo*>(&to_msg);
  auto& from = static_cast<const CharacterSummaryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.CharacterSummaryInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_gender() != 0) {
    _this->_internal_set_gender(from._internal_gender());
  }
  if (from._internal_region() != 0) {
    _this->_internal_set_region(from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterSummaryInfo::CopyFrom(const CharacterSummaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.CharacterSummaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterSummaryInfo::IsInitialized() const {
  return true;
}

void CharacterSummaryInfo::InternalSwap(CharacterSummaryInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterSummaryInfo, _impl_.region_)
      + sizeof(CharacterSummaryInfo::_impl_.region_)
      - PROTOBUF_FIELD_OFFSET(CharacterSummaryInfo, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterSummaryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[28]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::Protocol::Vector2Info& pos(const PlayerInfo* msg);
};

const ::Protocol::Vector2Info&
PlayerInfo::_Internal::pos(const PlayerInfo* msg) {
  return *msg->_impl_.pos_;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::Protocol::Vector2Info(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.PlayerInfo.username"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector2Info pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EDirection direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::Protocol::EDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.PlayerInfo.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // .Protocol.Vector2Info pos = 3;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .Protocol.EDirection direction = 4;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .Protocol.Vector2Info pos = 3;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .Protocol.EDirection direction = 4;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::Protocol::Vector2Info::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.direction_)
      + sizeof(PlayerInfo::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[29]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_JwtLoginRequest*
Arena::CreateMaybeMessage< ::Protocol::C_JwtLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_JwtLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_JwtLoginReply*
Arena::CreateMaybeMessage< ::Protocol::S_JwtLoginReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_JwtLoginReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CreateCharacterRequest*
Arena::CreateMaybeMessage< ::Protocol::C_CreateCharacterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CreateCharacterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CreateCharacterReply*
Arena::CreateMaybeMessage< ::Protocol::S_CreateCharacterReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CreateCharacterReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CharacterListRequest*
Arena::CreateMaybeMessage< ::Protocol::C_CharacterListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CharacterListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CharacterListReply*
Arena::CreateMaybeMessage< ::Protocol::S_CharacterListReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CharacterListReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_EnterGame*
Arena::CreateMaybeMessage< ::Protocol::C_EnterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_EnterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_EnterGame*
Arena::CreateMaybeMessage< ::Protocol::S_EnterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_EnterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PlayerList*
Arena::CreateMaybeMessage< ::Protocol::S_PlayerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BroadcastPlayerEnter*
Arena::CreateMaybeMessage< ::Protocol::S_BroadcastPlayerEnter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BroadcastPlayerEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LeaveGame*
Arena::CreateMaybeMessage< ::Protocol::C_LeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LeaveGame*
Arena::CreateMaybeMessage< ::Protocol::S_LeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BroadcastPlayerLeave*
Arena::CreateMaybeMessage< ::Protocol::S_BroadcastPlayerLeave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BroadcastPlayerLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PlayerMoveRequest*
Arena::CreateMaybeMessage< ::Protocol::C_PlayerMoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PlayerMoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PlayerMoveReply*
Arena::CreateMaybeMessage< ::Protocol::S_PlayerMoveReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PlayerMoveReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BroadcastPlayerMove*
Arena::CreateMaybeMessage< ::Protocol::S_BroadcastPlayerMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BroadcastPlayerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ChangeRoomBegin*
Arena::CreateMaybeMessage< ::Protocol::S_ChangeRoomBegin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ChangeRoomBegin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ChangeRoomReady*
Arena::CreateMaybeMessage< ::Protocol::C_ChangeRoomReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ChangeRoomReady >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ChangeRoomCommit*
Arena::CreateMaybeMessage< ::Protocol::S_ChangeRoomCommit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ChangeRoomCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SpawnMonster*
Arena::CreateMaybeMessage< ::Protocol::S_SpawnMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SpawnMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DespawnMonster*
Arena::CreateMaybeMessage< ::Protocol::S_DespawnMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DespawnMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BroadcastMonsterMove*
Arena::CreateMaybeMessage< ::Protocol::S_BroadcastMonsterMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BroadcastMonsterMove >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BroadcastMonsterAttack*
Arena::CreateMaybeMessage< ::Protocol::S_BroadcastMonsterAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BroadcastMonsterAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BroadcastMonsterDeath*
Arena::CreateMaybeMessage< ::Protocol::S_BroadcastMonsterDeath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BroadcastMonsterDeath >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PlayerAttackRequest*
Arena::CreateMaybeMessage< ::Protocol::C_PlayerAttackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PlayerAttackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BroadcastPlayerAttack*
Arena::CreateMaybeMessage< ::Protocol::S_BroadcastPlayerAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BroadcastPlayerAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Vector2Info*
Arena::CreateMaybeMessage< ::Protocol::Vector2Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Vector2Info >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PlayerMoveInfo*
Arena::CreateMaybeMessage< ::Protocol::PlayerMoveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PlayerMoveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::CharacterSummaryInfo*
Arena::CreateMaybeMessage< ::Protocol::CharacterSummaryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::CharacterSummaryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PlayerInfo*
Arena::CreateMaybeMessage< ::Protocol::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PlayerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
